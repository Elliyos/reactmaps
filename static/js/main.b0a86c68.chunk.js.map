{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["mapStyles","position","width","height","padding","margin","CurrentLocation","_React$Component","props","_this","Object","classCallCheck","this","_this$props$initialCe","possibleConstructorReturn","getPrototypeOf","call","initialCenter","lat","lng","state","currentLocation","inherits","createClass","key","value","prevProps","prevState","google","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","_this2","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","_this$state$currentLo","mapConfig","assign","Map","_this3","children","React","Children","c","cloneElement","mapCenter","style","react_default","a","createElement","ref","renderChildren","Component","defaultProps","visible","MapContainer","_Component","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","concat","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onClose","Map_CurrentLocation","dist","onClick","name","GoogleApiWrapper","apiKey","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b0a86c68.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nconst mapStyles = {\r\n    map: {\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        padding: '0',\r\n        margin: '0'\r\n    }\r\n};\r\n\r\nexport class CurrentLocation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const { lat, lng } = this.props.initialCenter;\r\n        this.state = {\r\n            currentLocation: {\r\n                lat: lat,\r\n                lng: lng\r\n            }\r\n        };\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.google !== this.props.google) {\r\n            this.loadMap();\r\n        }\r\n        if (prevState.currentLocation !== this.state.currentLocation) {\r\n            this.recenterMap();\r\n        }\r\n    }\r\n    recenterMap() {\r\n        const map = this.map;\r\n        const current = this.state.currentLocation;\r\n\r\n        const google = this.props.google;\r\n        const maps = google.maps;\r\n\r\n        if (map) {\r\n            let center = new maps.LatLng(current.lat, current.lng);\r\n            map.panTo(center);\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.centerAroundCurrentLocation) {\r\n            if (navigator && navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(pos => {\r\n                    const coords = pos.coords;\r\n                    this.setState({\r\n                        currentLocation: {\r\n                            lat: coords.latitude,\r\n                            lng: coords.longitude\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        this.loadMap();\r\n    }\r\n    loadMap() {\r\n        if (this.props && this.props.google) {\r\n            // checks if google is available\r\n            const { google } = this.props;\r\n            const maps = google.maps;\r\n\r\n            const mapRef = this.refs.map;\r\n\r\n            // reference to the actual DOM element\r\n            const node = ReactDOM.findDOMNode(mapRef);\r\n\r\n            let { zoom } = this.props;\r\n            const { lat, lng } = this.state.currentLocation;\r\n            const center = new maps.LatLng(lat, lng);\r\n            const mapConfig = Object.assign(\r\n                {},\r\n                {\r\n                    center: center,\r\n                    zoom: zoom\r\n                }\r\n            );\r\n\r\n            // maps.Map() is constructor that instantiates the map\r\n            this.map = new maps.Map(node, mapConfig);\r\n        }\r\n    }\r\n    renderChildren() {\r\n        const { children } = this.props;\r\n\r\n        if (!children) return;\r\n\r\n        return React.Children.map(children, c => {\r\n            if (!c) return;\r\n            return React.cloneElement(c, {\r\n                map: this.map,\r\n                google: this.props.google,\r\n                mapCenter: this.state.currentLocation\r\n            });\r\n        });\r\n    }\r\n    render() {\r\n        const style = Object.assign({}, mapStyles.map);\r\n        return (\r\n            <div>\r\n                <div style={style} ref=\"map\">\r\n                    Loading map...\r\n           </div>\r\n                {this.renderChildren()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCurrentLocation.defaultProps = {\r\n    zoom: 14,\r\n    initialCenter: {\r\n        lat: -1.2884,\r\n        lng: 36.8233\r\n    },\r\n    centerAroundCurrentLocation: false,\r\n    visible: true\r\n};\r\n\r\nexport { CurrentLocation as default }\r\n","\r\nimport React, { Component } from 'react';\r\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\n\r\nimport CurrentLocation from './Map';\r\n\r\nexport class MapContainer extends Component {\r\n  state = {\r\n    showingInfoWindow: false,\r\n    activeMarker: {},\r\n    selectedPlace: {}\r\n  };\r\n\r\n  onMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n\r\n  onClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CurrentLocation\r\n        centerAroundCurrentLocation\r\n        google={this.props.google}\r\n      >\r\n        <Marker onClick={this.onMarkerClick} name={'current location'} />\r\n        <InfoWindow\r\n          marker={this.state.activeMarker}\r\n          visible={this.state.showingInfoWindow}\r\n          onClose={this.onClose}\r\n        >\r\n          <div>\r\n            <h4>{this.state.selectedPlace.name}</h4>\r\n          </div>\r\n        </InfoWindow>\r\n      </CurrentLocation>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyD_3mdPoryUtQengHHL__bbgtjvNUDAplE'\r\n})(MapContainer);\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}